---
title: "A Replication of Karlan and List (2007)"
author: "Bansari Kathrotia"
date: April 16, 2024
callout-appearance: minimal # this hides the blue "i" icon on .callout-notes
toc: true
---


## Introduction

Dean Karlan at Yale and John List at the University of Chicago conducted a field experiment to test the effectiveness of different fundraising letters. They sent out 50,000 fundraising letters to potential donors, randomly assigning each letter to one of three treatments: a standard letter, a matching grant letter, or a challenge grant letter. They published the results of this experiment in the _American Economic Review_ in 2007. The article and supporting data are available from the [AEA website](https://www.aeaweb.org/articles?id=10.1257/aer.97.5.1774) and from Innovations for Poverty Action as part of [Harvard's Dataverse](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/27853&version=4.2).

_to do: expand on the description of the experiment._

This project seeks to replicate their results.

```{python}
import pandas as pd
import numpy as np
```

## Dataset 

```{python}
#| message: false
#| echo: true

data = pd.read_stata('data/karlan_list_2007.dta')
#convert the stata file to csv
data.to_csv('data/karlan_list_2007.csv')
data
```

### Description

The dataset contains 50,083 rows and 51 columns with different datatypes. 

_todo: Read the data into R/Python and describe the data_

Key points summarizing the dataset:

- **Experimental Design**: Tracks the impact of different fundraising treatments versus control scenarios on donor behavior.
- **Matching and Donation Thresholds**: Includes variables for various matching ratios and financial thresholds, influencing donation amounts.
- **Donor Demographics and History**: Details about donors such as gender, couple status, previous donations, and years since the first donation.
- **Geographic and Socioeconomic Factors**: Analyzes the influence of state and local demographics, including political alignment and socioeconomic status, on donation patterns.

```{python}
#| echo: false

# Calculate the mean for treatment and control to get the percentages
treatment_perc = data['treatment'].mean()
control_perc = data['control'].mean()
```

```{python}
#| echo: true

# Printing the results
print(f"Treatment Percentage: {treatment_perc}")
print(f"Control Percentage: {control_perc}")
```

:::: {.callout-note collapse="true"}
### Variable Definitions

| Variable             | Description                                                         |
|----------------------|---------------------------------------------------------------------|
| `treatment`          | Treatment                                                           |
| `control`            | Control                                                             |
| `ratio`              | Match ratio                                                         |
| `ratio2`             | 2:1 match ratio                                                     |
| `ratio3`             | 3:1 match ratio                                                     |
| `size`               | Match threshold                                                     |
| `size25`             | \$25,000 match threshold                                            |
| `size50`             | \$50,000 match threshold                                            |
| `size100`            | \$100,000 match threshold                                           |
| `sizeno`             | Unstated match threshold                                            |
| `ask`                | Suggested donation amount                                           |
| `askd1`              | Suggested donation was highest previous contribution                |
| `askd2`              | Suggested donation was 1.25 x highest previous contribution         |
| `askd3`              | Suggested donation was 1.50 x highest previous contribution         |
| `ask1`               | Highest previous contribution (for suggestion)                      |
| `ask2`               | 1.25 x highest previous contribution (for suggestion)               |
| `ask3`               | 1.50 x highest previous contribution (for suggestion)               |
| `amount`             | Dollars given                                                       |
| `gave`               | Gave anything                                                       |
| `amountchange`       | Change in amount given                                              |
| `hpa`                | Highest previous contribution                                       |
| `ltmedmra`           | Small prior donor: last gift was less than median \$35              |
| `freq`               | Number of prior donations                                           |
| `years`              | Number of years since initial donation                              |
| `year5`              | At least 5 years since initial donation                             |
| `mrm2`               | Number of months since last donation                                |
| `dormant`            | Already donated in 2005                                             |
| `female`             | Female                                                              |
| `couple`             | Couple                                                              |
| `state50one`         | State tag: 1 for one observation of each of 50 states; 0 otherwise  |
| `nonlit`             | Nonlitigation                                                       |
| `cases`              | Court cases from state in 2004-5 in which organization was involved |
| `statecnt`           | Percent of sample from state                                        |
| `stateresponse`      | Proportion of sample from the state who gave                        |
| `stateresponset`     | Proportion of treated sample from the state who gave                |
| `stateresponsec`     | Proportion of control sample from the state who gave                |
| `stateresponsetminc` | stateresponset - stateresponsec                                     |
| `perbush`            | State vote share for Bush                                           |
| `close25`            | State vote share for Bush between 47.5% and 52.5%                   |
| `red0`               | Red state                                                           |
| `blue0`              | Blue state                                                          |
| `redcty`             | Red county                                                          |
| `bluecty`            | Blue county                                                         |
| `pwhite`             | Proportion white within zip code                                    |
| `pblack`             | Proportion black within zip code                                    |
| `page18_39`          | Proportion age 18-39 within zip code                                |
| `ave_hh_sz`          | Average household size within zip code                              |
| `median_hhincome`    | Median household income within zip code                             |
| `powner`             | Proportion house owner within zip code                              |
| `psch_atlstba`       | Proportion who finished college within zip code                     |
| `pop_propurban`      | Proportion of population urban within zip code                      |

::::


### Balance Test 

As an ad hoc test of the randomization mechanism, I provide a series of tests that compare aspects of the treatment and control groups to assess whether they are statistically significantly different from one another.


### T-Test

_todo: test a few variables other than the key outcome variables (for example, test months since last donation) to see if the treatment and control groups are statistically significantly different at the 95% confidence level. Do each as a t-test and separately as a linear regression, and confirm you get the exact same results from both methods. When doing a t-test, use the formula in the class slides. When doing the linear regression, regress for example mrm2 on treatment and look at the estimated coefficient on the treatment variable. It might be helpful to compare parts of your analysis to Table 1 in the paper. Be sure to comment on your results (hint: why is Table 1 included in the paper)._


Comparing the average values of variables such as `mrm2` between treatment and control groups helps us determine if there are any statistically significant differences between these groups at a 95% confidence level.

```{python}

#| echo: false
from scipy.stats import ttest_ind

# Assume 'data' is a DataFrame loaded previously
# Filtering treatment and control groups
treatment_group = data.loc[data['treatment'] == 1, 'mrm2'].dropna()
control_group = data.loc[data['control'] == 1, 'mrm2'].dropna()

# Conducting t-tests between treatment and control groups, and within control group itself
treatment_vs_control_stats = ttest_ind(treatment_group, control_group)
control_vs_control_stats = ttest_ind(control_group, control_group)  # Normally not meaningful

```

```{python}
# Outputting the results of the t-tests
treatment_vs_control_stats, control_vs_control_stats
```

```{python}

#| echo: false

evar = ['female', 'couple', 'pwhite', 'pblack', 'page18_39', 'ave_hh_sz', 'median_hhincome', 'powner', 'psch_atlstba', 'pop_propurban']
import statsmodels.api as sm
import statsmodels.formula.api as smf

# Defining explanatory variables and the response variable
formula = 'dormant ~ ' + ' + '.join(evar)

# Subset the data for the Treatment Group
treatment_data = data.query("treatment == 1")

# Fit the linear regression model for the Treatment Group
lin_reg_treatment = smf.ols(formula, data=treatment_data).fit()

```

```{python}
# Print the summary of the model for the Treatment Group
print(lin_reg_treatment.summary())

# Visualizing the importance of variables 
print(lin_reg_treatment.params.sort_values(key=abs, ascending=False))  
```

```{python}
#| echo: false

# Subset the data for the Control Group
control_data = data.query("treatment == 0")

# Fit the linear regression model for the Control Group
lin_reg_control = smf.ols(formula, data=control_data).fit()


```

```{python}
# Print the summary of the model for the Control Group
print(lin_reg_control.summary())

# Visualizing the importance of variables (similar simplified method)
print(lin_reg_control.params.sort_values(key=abs, ascending=False))

```
## Experimental Results

### Charitable Contribution Made

First, I analyze whether matched donations lead to an increased response rate of making a donation. 

```{python}

#| echo: False

import matplotlib.pyplot as plt
import pandas as pd
import statsmodels.api as sm
from scipy.stats import ttest_ind

# Calculate the mean donation rates for both groups
mean_rates = {
    'Treatment': data.loc[data['treatment'] == 1, 'gave'].mean(),
    'Control': data.loc[data['control'] == 1, 'gave'].mean()
}

# Plotting the proportion of donors for each group
import matplotlib.pyplot as plt

def plot_donation_rates(rates):
    plt.figure(figsize=(8, 5))
    # Custom colors and wider bars
    colors = ['red', 'pink']  # New colors for the bars
    bar_width = 0.8  # Wider bars for better visibility
    bars = plt.bar(rates.keys(), rates.values(), color=colors, width=bar_width)
    plt.ylabel('Proportion of Donors')
    plt.title('Donor Proportions by Group')
    plt.ylim(0, max(rates.values()) + 0.02)
    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom')
    plt.show()

plot_donation_rates(mean_rates)

# Perform a t-test on the 'gave' variable between treatment and control groups
def compare_groups(data, group_var, response_var):
    group_data = {group: data[data[group_var] == val][response_var] for val, group in enumerate(['Control', 'Treatment'])}
    t_stat, p_val = ttest_ind(group_data['Treatment'], group_data['Control'])
    return t_stat, p_val

t_test_statistic, p_value = compare_groups(data, 'treatment', 'gave')

# Simple OLS regression to assess the impact of treatment on giving
def run_ols(data, response, predictor):
    X = sm.add_constant(data[predictor])
    y = data[response]
    model = sm.OLS(y, X)
    results = model.fit()
    return results

ols_results = run_ols(data, 'gave', 'treatment')

# Output the t-test and OLS results
t_test_statistic, p_value, ols_results.summary()

```

_todo: make a barplot with two bars. Each bar is the proportion of people who donated. One bar for treatment and one bar for control._

_todo: run a t-test between the treatment and control groups on the binary outcome of whether any charitable donation was made. Also run a bivariate linear regression that demonstrates the same finding. (It may help to confirm your calculations match Table 2a Panel A.) Report your statistical results and interpret them in the context of the experiment (e.g., if you found a difference with a small p-value or that was statistically significant at some threshold, what have you learned about human behavior? Use mostly English words, not numbers or stats, to explain your finding.)_

_todo: run a probit regression where the outcome variable is whether any charitable donation was made and the explanatory variable is assignment to treatment or control. Confirm that your results replicate Table 3 column 1 in the paper._

```{python}

#| echo: false

import statsmodels.api as sm
from statsmodels.discrete.discrete_model import Probit

# Assuming 'data' is your DataFrame and it contains the response variable 'y' and predictor 'treatment'
y = data['gave']  # Example of a binary response variable, like a yes/no outcome
X = sm.add_constant(data['treatment'])  # Adds an intercept to the model

# Initializing and fitting the Probit model
probit_model = Probit(y, X)
probit_results = probit_model.fit()

# Displaying the summary of the Probit model
probit_model_summary = probit_results.summary()
print(probit_model_summary)

```
### Differences between Match Rates

Next, I assess the effectiveness of different sizes of matched donations on the response rate.

```{python}
donations_ratio1 = data[data['ratio'] == 1]['gave']
donations_ratio2 = data[data['ratio'] == 2]['gave']
donations_ratio3 = data[data['ratio'] == 3]['gave']

t_test_1_vs_2 = ttest_ind(donations_ratio1, donations_ratio2)
t_test_1_vs_3 = ttest_ind(donations_ratio1, donations_ratio3)
t_test_2_vs_3 = ttest_ind(donations_ratio2, donations_ratio3)

t_test_1_vs_2, t_test_1_vs_3, t_test_2_vs_3

```

_todo: Use a series of t-tests to test whether the size of the match ratio has an effect on whether people donate or not. For example, does the 2:1 match rate lead increase the likelihood that someone donates as compared to the 1:1 match rate? Do your results support the "figures suggest" comment the authors make on page 8?_


```{python}
#| echo: false
import pandas as pd
import statsmodels.api as sm

data['ratio'] = data['ratio'].astype(str)
y = data['gave'].astype(float)

X_categorical = pd.get_dummies(data['ratio'], drop_first=True).astype(float)
X_categorical = sm.add_constant(X_categorical)  

```

```{python}
model_categorical = sm.OLS(y, X_categorical)
results_categorical = model_categorical.fit()

print(results_categorical.summary())

```


_todo: Assess the same issue using a regression. Specifically, create the variable `ratio1` then regress `gave` on `ratio1`, `ratio2`, and `ratio3` (or alternatively, regress `gave` on the categorical variable `ratio`). Interpret the coefficients and their statistical precision._

_todo: Calculate the response rate difference between the 1:1 and 2:1 match ratios and the 2:1 and 3:1 ratios.  Do this directly from the data, and do it by computing the differences in the fitted coefficients of the previous regression. what do you conclude regarding the effectiveness of different sizes of matched donations?_

```{python}
import pandas as pd

# Define the ratios to be analyzed
ratios = ['1', '2', '3']

# Calculate donation rates for each ratio
donation_rates = {ratio: data[data['ratio'] == ratio]['gave'].mean() for ratio in ratios}

# Calculate differences between successive donation rates
rate_differences = {f"{ratios[i]}_to_{ratios[i+1]}": donation_rates[ratios[i+1]] - donation_rates[ratios[i]]
                    for i in range(len(ratios) - 1)}

# Enhanced print statements with more detailed messaging
for diff_label, diff_value in rate_differences.items():
    # Formatting the label for more readable output
    ratio_pair = diff_label.replace('_', ' to ')
    print(f"Change in donation rates from {ratio_pair.replace(':', ' to ')} ratio: {diff_value:.6f}")

```
### Size of Charitable Contribution

In this subsection, I analyze the effect of the size of matched donation on the size of the charitable contribution.

_todo: Calculate a t-test or run a bivariate linear regression of the donation amount on the treatment status. What do we learn from doing this analysis?_

```{python}
#| echo: false
treatment_group = data[data['treatment'] == 1]['amount']  
control_group = data[data['treatment'] == 0]['amount']  

t_stat, p_value = ttest_ind(treatment_group, control_group, nan_policy='omit', equal_var=False)

print("T-Statistic:", t_stat)
print("P-Value:", p_value)
```

_todo: now limit the data to just people who made a donation and repeat the previous analysis. This regression allows you to analyze how much respondents donate conditional on donating some positive amount. Interpret the regression coefficients -- what did we learn? Does the treatment coefficient have a causal interpretation?_ 

```{python}

#| echo: false
donors_data = data[data['amount'] > 0]
treatment_group = donors_data[donors_data['treatment'] == 1]['amount']
control_group = donors_data[donors_data['treatment'] == 0]['amount']

t_stat, p_value = ttest_ind(treatment_group, control_group, nan_policy='omit', equal_var=False)

print("T-Statistic:", t_stat)
print("P-Value:", p_value)
```

_todo: Make two plot: one for the treatment group and one for the control. Each plot should be a histogram of the donation amounts only among people who donated. Add a red vertical bar or some other annotation to indicate the sample average for each plot._

```{python}
import matplotlib.pyplot as plt
import seaborn as sns

# Set the style of seaborn for more attractive and informative graphics
sns.set(style="whitegrid")

donors_data = data[data['amount'] > 0]

treatment_donors = donors_data[donors_data['treatment'] == 1]['amount']
control_donors = donors_data[donors_data['treatment'] == 0]['amount']

treatment_mean = treatment_donors.mean()
control_mean = control_donors.mean()

plt.figure(figsize=(14, 6))  # Adjusted for a better fit of both histograms

# Histogram for the Treatment Group
plt.subplot(1, 2, 1)
sns.histplot(treatment_donors, bins=30, color='green', kde=True, edgecolor='black')
plt.axvline(treatment_mean, color='darkred', linestyle='dashed', linewidth=2)
plt.title('Treatment Group Donation Amounts')
plt.xlabel('Donation Amount ($)')
plt.ylabel('Frequency')
plt.annotate(f'Mean: {treatment_mean:.2f}', xy=(treatment_mean, 10), xytext=(treatment_mean + 50, 12),
             arrowprops=dict(facecolor='black', arrowstyle='->'))

# Histogram for the Control Group
plt.subplot(1, 2, 2)
sns.histplot(control_donors, bins=30, color='purple', kde=True, edgecolor='black')
plt.axvline(control_mean, color='darkred', linestyle='dashed', linewidth=2)
plt.title('Control Group Donation Amounts')
plt.xlabel('Donation Amount ($)')
plt.ylabel('Frequency')
plt.annotate(f'Mean: {control_mean:.2f}', xy=(control_mean, 10), xytext=(control_mean + 50, 12),
             arrowprops=dict(facecolor='black', arrowstyle='->'))

plt.tight_layout()
plt.show()

```

## Simulation Experiment

As a reminder of how the t-statistic "works," in this section I use simulation to demonstrate the Law of Large Numbers and the Central Limit Theorem.

Suppose the true distribution of respondents who do not get a charitable donation match is Bernoulli with probability p=0.018 that a donation is made. 

Further suppose that the true distribution of respondents who do get a charitable donation match of any size  is Bernoulli with probability p=0.022 that a donation is made.


### Law of Large Numbers

_to do:  Make a plot like those on slide 43 from our first class and explain the plot to the reader. To do this, you will simulate 100,00 draws from the control distribution and 10,000 draws from the treatment distribution. You'll then calculate a vector of 10,000 differences, and then you'll plot the cumulative average of that vector of differences. Comment on whether the cumulative average approaches the true difference in means._

```{python}
import numpy as np
import matplotlib.pyplot as plt

# Parameters set by the professor
p_control = 0.018
p_treatment = 0.022
n_simulations = 10000

# Simulating outcomes
control_draws = np.random.binomial(1, p_control, n_simulations)
treatment_draws = np.random.binomial(1, p_treatment, n_simulations)

# Calculating differences between treatment and control outcomes
diff_vector = treatment_draws - control_draws

# Calculating cumulative average of differences over simulations
cumulative_avg_diff = np.cumsum(diff_vector) / np.arange(1, n_simulations + 1)

# Setting up the plot
plt.figure(figsize=(10, 6))
plt.plot(cumulative_avg_diff, color='blue', label='Cumulative Average of Differences')
plt.axhline((p_treatment - p_control), color='red', linestyle='--', label='Expected Difference')
plt.xlabel('Number of Simulations')
plt.ylabel('Cumulative Average Difference')
plt.title('Simulation of Difference Between Treatment and Control')
plt.legend()
plt.grid(True)  # Adding a grid for better readability of the plot
plt.show()

```

### Central Limit Theorem

_to do: Make 4 histograms like those on slide 44 from our first class at sample sizes 50, 200, 500, and 1000 and explain these plots to the reader. To do this for a sample size of e.g. 50, take 50 draws from each of the control and treatment distributions, and calculate the average difference between those draws. Then repeat that process 999 more times so that you have 1000 averages. Plot the histogram of those averages. Comment on whether zero is in the "middle" of the distribution or whether it's in the "tail."_


```{python}
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def simulate_and_plot_histograms(control_prob, treatment_prob, sample_sizes, num_repetitions=1000):
    # Setting up the visual style using seaborn for more appealing histograms
    sns.set(style="whitegrid", palette="pastel")

    fig, axes = plt.subplots(1, 4, figsize=(20, 5))
    fig.suptitle('Distribution of Difference in Proportions Across Sample Sizes')

    for i, sample_size in enumerate(sample_sizes):
        mean_differences = []

        for _ in range(num_repetitions):
            control_draws = np.random.binomial(1, control_prob, sample_size)
            treatment_draws = np.random.binomial(1, treatment_prob, sample_size)
            mean_differences.append(treatment_draws.mean() - control_draws.mean())

        # Using seaborn for histogram plotting for improved aesthetics
        sns.histplot(mean_differences, bins=30, kde=True, color='skyblue', ax=axes[i])
        axes[i].axvline(0, color='red', linestyle='dashed', linewidth=2, label='No Difference')
        axes[i].axvline(treatment_prob - control_prob, color='green', linestyle='dashed', linewidth=2, label='True Difference')
        axes[i].set_title(f'Sample Size: {sample_size}')
        axes[i].set_xlabel('Mean Difference')
        axes[i].set_ylabel('Frequency')
        if i == 0:  # Adding the legend to only the first subplot for clarity
            axes[i].legend()

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()

# Control and treatment probabilities given
control_prob = 0.018
treatment_prob = 0.022

# List of sample sizes to simulate
sample_sizes = [50, 200, 500, 1000]

# Call the function with the updated parameters and visual setup
simulate_and_plot_histograms(control_prob, treatment_prob, sample_sizes)

```